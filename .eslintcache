[{"C:\\Users\\User\\demonworld_ui\\src\\index.js":"1","C:\\Users\\User\\demonworld_ui\\src\\App.js":"2","C:\\Users\\User\\demonworld_ui\\src\\reportWebVitals.js":"3","C:\\Users\\User\\demonworld_ui\\src\\services\\factionService.js":"4","C:\\Users\\User\\demonworld_ui\\src\\constants\\unitTypes.js":"5","C:\\Users\\User\\demonworld_ui\\src\\constants\\factions.js":"6","C:\\Users\\User\\demonworld_ui\\src\\components\\compendiums\\factionTable\\factionTable.js":"7","C:\\Users\\User\\demonworld_ui\\src\\components\\compendiums\\factionTable\\OptionsMenuDialog.js":"8","C:\\Users\\User\\demonworld_ui\\src\\components\\compendiums\\factionTable\\factionSelector.js":"9","C:\\Users\\User\\demonworld_ui\\src\\components\\compendiums\\factionTable\\depencies\\tableIcons.js":"10","C:\\Users\\User\\demonworld_ui\\src\\components\\compendiums\\factionTable\\depencies\\factionTableFunctions.js":"11","C:\\Users\\User\\demonworld_ui\\src\\components\\shared\\statCardCommander.js":"12","C:\\Users\\User\\demonworld_ui\\src\\components\\shared\\statCardUnit.js":"13","C:\\Users\\User\\demonworld_ui\\src\\components\\ListGenerator\\treeView.js":"14","C:\\Users\\User\\demonworld_ui\\src\\components\\ListGenerator\\dependencies\\treeViewFunctions.js":"15","C:\\Users\\User\\demonworld_ui\\src\\components\\ListGenerator\\armyListDisplay.js":"16","C:\\Users\\User\\demonworld_ui\\src\\components\\shared\\sharedFunctions.js":"17","C:\\Users\\User\\demonworld_ui\\src\\components\\ListGenerator\\ListGeneratorController.js":"18","C:\\Users\\User\\demonworld_ui\\src\\components\\shared\\armySelection.js":"19","C:\\Users\\User\\demonworld_ui\\src\\components\\gameLogic\\allies.js":"20","C:\\Users\\User\\demonworld_ui\\src\\components\\gameLogic\\goblinRules.js":"21","C:\\Users\\User\\demonworld_ui\\src\\constants\\operators.js":"22","C:\\Users\\User\\demonworld_ui\\src\\components\\ListGenerator\\subList.js":"23","C:\\Users\\User\\demonworld_ui\\src\\components\\ListGenerator\\gearButtons.js":"24","C:\\Users\\User\\demonworld_ui\\src\\constants\\numericConstants.js":"25","C:\\Users\\User\\demonworld_ui\\src\\theme.js":"26","C:\\Users\\User\\demonworld_ui\\src\\components\\landingPage\\landingPage.js":"27"},{"size":631,"mtime":1619945168470,"results":"28","hashOfConfig":"29"},{"size":3747,"mtime":1646592309644,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"29"},{"size":636,"mtime":1620080038838,"results":"32","hashOfConfig":"29"},{"size":238,"mtime":1620313611967,"results":"33","hashOfConfig":"29"},{"size":501,"mtime":1619865009357,"results":"34","hashOfConfig":"29"},{"size":10833,"mtime":1636287532389,"results":"35","hashOfConfig":"29"},{"size":5105,"mtime":1646575631369,"results":"36","hashOfConfig":"29"},{"size":1615,"mtime":1636288345830,"results":"37","hashOfConfig":"29"},{"size":2213,"mtime":1619864208753,"results":"38","hashOfConfig":"29"},{"size":3554,"mtime":1636288257612,"results":"39","hashOfConfig":"29"},{"size":7420,"mtime":1620312717463,"results":"40","hashOfConfig":"29"},{"size":7322,"mtime":1620474715064,"results":"41","hashOfConfig":"29"},{"size":5190,"mtime":1636884018483,"results":"42","hashOfConfig":"29"},{"size":2702,"mtime":1619945299346,"results":"43","hashOfConfig":"29"},{"size":5119,"mtime":1639582142247,"results":"44","hashOfConfig":"29"},{"size":408,"mtime":1620060577473,"results":"45","hashOfConfig":"29"},{"size":5569,"mtime":1639225694663,"results":"46","hashOfConfig":"29"},{"size":1273,"mtime":1636189406328,"results":"47","hashOfConfig":"29"},{"size":143,"mtime":1636278840699,"results":"48","hashOfConfig":"29"},{"size":5570,"mtime":1636884200321,"results":"49","hashOfConfig":"29"},{"size":74,"mtime":1636613720246,"results":"50","hashOfConfig":"29"},{"size":4185,"mtime":1639583153125,"results":"51","hashOfConfig":"29"},{"size":1806,"mtime":1646584398852,"results":"52","hashOfConfig":"29"},{"size":40,"mtime":1638729971868,"results":"53","hashOfConfig":"29"},{"size":178,"mtime":1639594073816,"results":"54","hashOfConfig":"29"},{"size":386,"mtime":1643049686092,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"2b038z",{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"58"},"C:\\Users\\User\\demonworld_ui\\src\\index.js",[],["120","121"],"C:\\Users\\User\\demonworld_ui\\src\\App.js",["122"],"//js\nimport \"./App.css\";\n// React\nimport React, { useEffect, useState } from \"react\";\n// material ui\nimport { IconButton } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n// icons\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport MenuBookIcon from \"@material-ui/icons/MenuBook\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport CloseIcon from \"@material-ui/icons/Close\";\n// router\nimport { Route, Switch, Link } from \"react-router-dom\";\nimport { Grid } from \"@material-ui/core\";\n// theme\nimport theme from \"./theme\";\n// components and functions\nimport landingPage from \"./components/landingPage/landingPage\";\nimport factionTable from \"./components/compendiums/factionTable/factionTable\";\nimport ListGeneratorController from \"./components/ListGenerator/ListGeneratorController\";\n// clsx\nimport clsx from \"clsx\";\n\nconst useStyles = makeStyles({\n  root: {},\n  navBar: {\n    backgroundColor: \"black\",\n  },\n  linkList: {\n    listStyle: \"none\",\n    backgroundColor: \"black\",\n  },\n  drawer: {\n    width: \"200px\",\n    position: \"fixed\",\n    zIndex: 600,\n  },\n  closeButton: {\n    marginLeft: \"5em\",\n  },\n  openButton: {\n    marginLeft: \"2em\",\n    fontSize: \"2em\",\n  },\n  drawerButtons: {\n    color: \"black\",\n    opacity: 0.2,\n    \"&:hover\": {\n      opacity: 1,\n    },\n  },\n});\n\nconst App = () => {\n  const classes = useStyles();\n\n  const [drawerState, setDrawerState] = useState(false);\n\n  const toggleDrawer = () => {\n    setDrawerState(!drawerState);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <main>\n        {/* why the classes in the Drawer element? -> contains a lot of elements and CSS, this allows you\n               to override the paper class inside. This is importanbt because your width for drawer != paper width \n            */}\n        <Drawer\n          className={classes.drawer}\n          variant=\"persistent\"\n          anchor=\"left\"\n          classes={{ paper: classes.drawer }}\n          open={drawerState}\n          // onClose={setDrawerState(false)}\n        >\n          <List>\n            <ListItem>\n              <IconButton onClick={toggleDrawer} className={clsx(classes.drawerButtons, classes.closeButton)}>\n                <CloseIcon />\n              </IconButton>\n            </ListItem>\n            <ListItem>\n              <ListItemIcon>\n                <HomeIcon />\n              </ListItemIcon>\n              <Link to=\"/\">Startseite</Link>\n            </ListItem>\n          </List>\n          <List>\n            <ListItem>\n              <ListItemIcon>\n                <MenuBookIcon />\n              </ListItemIcon>\n              <Link to=\"/compendium\">Kompendium</Link>\n            </ListItem>\n          </List>\n          <List>\n            <ListItem>\n              <ListItemIcon></ListItemIcon>\n              <Link to=\"/listGenerator\">Armeegenerator</Link>\n            </ListItem>\n          </List>\n        </Drawer>\n        <Grid container>\n          <IconButton onClick={toggleDrawer} className={  clsx(classes.drawerButtons, classes.openButton) }>\n            <MenuIcon />\n          </IconButton>\n          <Switch>\n            <Route path=\"/\" component={landingPage} exact />\n            <Route path=\"/compendium\" component={factionTable} exact />\n            <Route path=\"/listGenerator\" component={ListGeneratorController} />\n          </Switch>\n        </Grid>\n      </main>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","C:\\Users\\User\\demonworld_ui\\src\\reportWebVitals.js",[],"C:\\Users\\User\\demonworld_ui\\src\\services\\factionService.js",[],"C:\\Users\\User\\demonworld_ui\\src\\constants\\unitTypes.js",[],"C:\\Users\\User\\demonworld_ui\\src\\constants\\factions.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\compendiums\\factionTable\\factionTable.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\compendiums\\factionTable\\OptionsMenuDialog.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\compendiums\\factionTable\\factionSelector.js",["123"],"// React\r\nimport React, { useState } from \"react\";\r\n// Material UI\r\nimport { Grid, Button } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n// icons\r\n// import SwordIcon from \"./customIcons/blackSword.png\";\r\n// import BowIcon from \"./customIcons/bow.jpg\";\r\n// components & functions\r\n// constants\r\nimport { ALL_FACTIONS_ARRAY } from \"../../../constants/factions\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    fontSize: \"20px\",\r\n    fontWeight: \"bold\",\r\n  },\r\n  buttons: {\r\n    backgroundColor:\"grey\",\r\n    marginRight:\"10px\",\r\n    textAlign:\"center\",\r\n    fontFamily: \"notMaryKate\",\r\n    fontSize: \"30px\",\r\n    height: \"60px\",\r\n    width: \"200px\",\r\n  },\r\n  bttnGroup: {\r\n    height: \"60px\",\r\n    marginLeft: \"60px\", \r\n    marginBottom: \"50px\",\r\n  },\r\n});\r\n\r\nconst  SelectFactionButtonGroup = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const [flag, setFlag] = useState(\"zwerge\");\r\n\r\n  const handleSelection = (newFaction) => {\r\n    props.filterData(newFaction);\r\n  };\r\n\r\n  const createButton = () => {\r\n    return ALL_FACTIONS_ARRAY.map((f) => (\r\n      <Button\r\n        className={classes.buttons}\r\n        key={f}\r\n        color={flag.toLowerCase() === f.toLowerCase() ? \"primary\" : \"secondary\"}\r\n        onClick={() => {\r\n          handleSelection(f);\r\n          // setFlag(f);\r\n        }}\r\n      >\r\n        {f}\r\n      </Button>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <Grid container direction=\"row\" className={classes.bttnGroup}>\r\n      {createButton()}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default  SelectFactionButtonGroup;\r\n",["124","125"],"C:\\Users\\User\\demonworld_ui\\src\\components\\compendiums\\factionTable\\depencies\\tableIcons.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\compendiums\\factionTable\\depencies\\factionTableFunctions.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\shared\\statCardCommander.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\shared\\statCardUnit.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\ListGenerator\\treeView.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\ListGenerator\\dependencies\\treeViewFunctions.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\ListGenerator\\armyListDisplay.js",["126"],"// React\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\n// Material UI\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Grid, Typography, IconButton, TextField } from \"@material-ui/core\";\r\n\r\n// icons\r\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\";\r\n\r\n// custom imports\r\nimport { DEFAULT_ARMY_SIZE } from \"../../constants/numericConstants\";\r\nimport { uuidGenerator } from \"../shared/sharedFunctions\";\r\n\r\n//TODO: this needs to change :D\r\n// import { pointAllowances } from \"../gameLogic/goblinRules\";\r\nimport SubList from \"./subList\";\r\n\r\n// TODO: remove unneeded styles\r\nconst useStyles = makeStyles({\r\n  root: { fontFamily: \"gonjuring\" },\r\n  list: { height: \"70%\", minHeight: \"70%\", maxHeight: \"70%\" },\r\n  HeaderBox: {\r\n    fontFamily: \"notMaryKate\",\r\n    fontSize: \"20px\",\r\n    fontWeight: \"bold\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    width: \"60%\",\r\n    borderBottom: \"solid 4px black\",\r\n  },\r\n  total: {\r\n    fontSize: \"20px\",\r\n    fontWeight: \"bold\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    width: \"60%\",\r\n  },\r\n  clearIcon: {\r\n    width: \"40px\",\r\n    height: \"40px\",\r\n  },\r\n  armyName: {\r\n    fontFamily: \"BreatheOfFire\",\r\n    \"& .MuiTextField\": {\r\n      fontFamily: \"BreatheOfFire\",\r\n    },\r\n  },\r\n  bottom: { bottom: \"100px\" },\r\n  withinLimit: { color: \"black\" },\r\n  exceeded: { color: \"red\" },\r\n  subList: {\r\n    textAlign: \"end\",\r\n  },\r\n});\r\n\r\nconst ArmyListDisplay = (props) => {\r\n  const classes = useStyles();\r\n\r\n  // TODO : PUT THIS IN A CONSTANT FILE :D\r\n\r\n  const maximum = DEFAULT_ARMY_SIZE;\r\n\r\n  const [addedUnits, setAddedUnits] = useState([]);\r\n  // eslint-disable-next-line  no-unused-vars\r\n  const [faction, setFaction] = useState(\"\");\r\n  const [total, setTotal] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setFaction(props.factionName);\r\n  }, [props.factionName]);\r\n\r\n  /**\r\n   *  Function adds the selected unit to the array that holds all selected units.\r\n   */\r\n  useEffect(() => {\r\n    if (props.selectedUnit) {\r\n      setAddedUnits([...addedUnits, props.selectedUnit]);\r\n    }\r\n  }, [props.selectedUnit]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  /**\r\n   * Function calculates the total army point cost\r\n   */\r\n  useEffect(() => {\r\n    let temp = 0;\r\n    if (addedUnits) {\r\n      addedUnits.forEach((u) => (temp += u.points));\r\n    }\r\n    setTotal(temp);\r\n  }, [addedUnits]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  /**\r\n   * Function calculates the remaining points.\r\n   */\r\n  useEffect(() => {\r\n    props.remainingPoints(props.maxPointsValue - props.totalPointValue);\r\n  }, [props.totalPointValue]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const filterUnitsForSubFaction = (allUnits, subFaction) => {\r\n    return allUnits.filter((u) => u.subFaction === subFaction);\r\n  };\r\n\r\n  /**\r\n   * Function removes a unit when its removal button is clicked.\r\n   * @param {*} identifier\r\n   */\r\n  const removeUnit = (identifier) => {\r\n    let temp = addedUnits.filter((u) => u.name + u.uniqueID !== identifier);\r\n    setAddedUnits(temp);\r\n  };\r\n\r\n  /**\r\n   * Function deletes the entire list.\r\n   */\r\n  const clearList = () => {\r\n    setAddedUnits([]);\r\n  };\r\n\r\n  /**\r\n   * Component creates the overall army list box but delegates the generation of the subFaction lists\r\n   * to the subList component.\r\n   */\r\n  return (\r\n    <Fragment>\r\n      <Typography className={classes.armyName}>{props.factionName}</Typography>\r\n\r\n      {addedUnits.length !== 0 ? (\r\n        <IconButton\r\n          onClick={() => {\r\n            clearList();\r\n          }}\r\n          className={classes.removeButton}\r\n        >\r\n          <RemoveCircleOutlineIcon />\r\n        </IconButton>\r\n      ) : null}\r\n\r\n      <List>\r\n        {props.distinctSubFactions.map((subFactionName) => (\r\n          <ListItem key={uuidGenerator()}>\r\n            <Grid container direction={\"column\"}>\r\n              <Typography className={classes.HeaderBox}>\r\n                {\" \"}\r\n                {subFactionName}\r\n              </Typography>\r\n              <SubList\r\n                factionName={props.factionName}\r\n                className={classes.subList}\r\n                subFactionName={subFactionName}\r\n                subFactionUnits={filterUnitsForSubFaction(\r\n                  addedUnits,\r\n                  subFactionName\r\n                )}\r\n                removeUnit={removeUnit}\r\n              />\r\n            </Grid>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      {addedUnits.length !== 0 ? (\r\n        <Typography className={classes.total}>\r\n          Gesamtpunktzahl: {total}\r\n          <TextField\r\n          //TODO: max. points as promp\r\n          // ref=\"maximumPoints\"\r\n          // defaultValue={maximum}\r\n          // variant=\"standard\"\r\n          // value={refs.maximumPoints.getValue()}\r\n          // onChange={setArmyMaxPoints(value)}\r\n          />\r\n        </Typography>\r\n      ) : null}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ArmyListDisplay;\r\n","C:\\Users\\User\\demonworld_ui\\src\\components\\shared\\sharedFunctions.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\ListGenerator\\ListGeneratorController.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\shared\\armySelection.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\gameLogic\\allies.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\gameLogic\\goblinRules.js",["127","128","129","130"],"import React, { useState } from \"react\";\r\nimport { operators } from \"../../constants/operators\";\r\n\r\n/**\r\n *\r\n * @param {*} selectedUnit - the unit added or deleted from the current list\r\n * @param {*} armyPointsTotal the maximum point allowance for the entire army\r\n * @param {*} operator - gives the math operator to use - add or subtract\r\n * @returns\r\n */\r\nconst GoblinRules = (selectedUnit, armyPointsTotal, operator) => {\r\n  const [selectedUnits, setSelectedUnits] = useState([]);\r\n\r\n  \r\n  // TODO: this still contains the dwarf values !!\r\n\r\n  // checkbox array! -> check of a box by deleting the element from the array.\r\n  let [specials, setSpecials] = useState([\"gaeta\", \"zahra\", \"ally\"]);\r\n\r\n  // subFaction Allowances\r\n  const [subFactionAllowance, setSubFactionAllowance] = useState({\r\n    unit: {\r\n      total: 0,\r\n      occurences: 2,\r\n      min: 0.3,\r\n      max: 1.0,\r\n      cardNames: [\"Einheit\"],\r\n      verify: (selectedUnit) => {\r\n        verifyUnit(selectedUnit);\r\n      },\r\n      isCorrect: false,\r\n    },\r\n    characters: {\r\n      total: 0,\r\n      occurences: 2,\r\n      min: 0.0,\r\n      max: 0.5,\r\n      cardNames: [\r\n        \"Held\",\r\n        \"Befehlshaber\",\r\n        \"Erdpriester\",\r\n        \"Erzpriester\",\r\n        \"Feuerpriester\",\r\n      ],\r\n      verify: (selectedUnit) => {\r\n        verifyUnit(selectedUnit);\r\n      },\r\n      isCorrect: true,\r\n    },\r\n    giantInsects: {\r\n      total: 0,\r\n      occurences: 2,\r\n      min: 0.0,\r\n      max: 0.4,\r\n      cardNames: [\"Gaeta\"],\r\n      verify: (selectedUnit) => {\r\n        verifyUnit(selectedUnit);\r\n      },\r\n      isCorrect: true,\r\n    },\r\n    insectRiders: {\r\n      total: 0,\r\n      occurences: 2,\r\n      min: 0.0,\r\n      max: 0.4,\r\n      cardNames: [\"Zah'ra\"],\r\n      verify: (selectedUnit) => {\r\n        verifyUnit(selectedUnit);\r\n      },\r\n      isCorrect: true,\r\n    },\r\n    ally: {\r\n      total: 0,\r\n      occurences: 2,\r\n      min: 0.0,\r\n      max: 0.4,\r\n      cardNames: [\"Imperium\"],\r\n      verify: (selectedUnit) => {\r\n        verifyUnit(selectedUnit);\r\n      },\r\n      isCorrect: true,\r\n    },\r\n  });\r\n\r\n  // TODO: REFACTOR THIS!!\r\n  /**\r\n   * Main function of the hook. Tests whether adding or deleting the selected unit will make the Army list non-compliant\r\n   * (i.e., breaking the rules of army composition).\r\n   *\r\n   *\r\n   * @param {*} selectedUnit  the selected unit\r\n   * @param {*} operator   arithmetic operator to be used (+ or -)\r\n   */\r\n  const verifyUnit = (selectedUnit, operator) => {\r\n    const type = kindOfUnit(selectedUnit);\r\n     \r\n\r\n    // unit added\r\n    if (operator === operators.ADD) {\r\n      alterList(operator, type)\r\n        ? setSubFactionAllowance({\r\n            ...subFactionAllowance,\r\n            [type]: { ...subFactionAllowance[type], isCorrect: false },\r\n          })\r\n        : setSubFactionAllowance({\r\n            ...subFactionAllowance,\r\n            [type]: { ...subFactionAllowance[type], isCorrect: true },\r\n          });\r\n\r\n      // set sub faction total and add unit\r\n      setSelectedUnits([...selectedUnits, selectedUnit]);\r\n      setSubFactionAllowance({\r\n        ...subFactionAllowance,\r\n        [type]: {\r\n          ...subFactionAllowance[type],\r\n          total: subFactionAllowance[type].total + selectedUnit.points,\r\n        },\r\n      });\r\n\r\n      // unit removed\r\n    } else if (operator === operators.SUBTRACT) {\r\n      alterList(operator, type)\r\n        ? setSubFactionAllowance({\r\n            ...subFactionAllowance,\r\n            [type]: { ...subFactionAllowance[type], isCorrect: false },\r\n          })\r\n        : setSubFactionAllowance({\r\n            ...subFactionAllowance,\r\n            [type]: { ...subFactionAllowance[type], isCorrect: true },\r\n          });\r\n\r\n      // TODO: TEST THIS\r\n      setSelectedUnits(\r\n        selectedUnits.filter((su) => su.name !== selectedUnit.name)\r\n      );\r\n      setSubFactionAllowance({\r\n        ...subFactionAllowance,\r\n        [type]: {\r\n          ...subFactionAllowance[type],\r\n          total: subFactionAllowance[type].total - selectedUnit.points,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Figure out the type of unit (the subfaction). The result is used to dynamically set an object property for the spread operations.\r\n   * @param {*} unit\r\n   * @returns\r\n   */\r\n  const kindOfUnit = (unit) => {\r\n    let result;\r\n    for (const subFaction in subFactionAllowance) {\r\n      if (subFactionAllowance[subFaction].cardNames.includes(unit.subFaction)) {\r\n        result = subFaction;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  /**\r\n   *  Function tests whether an added or removed {unit} makes the army list incorrect.\r\n   *\r\n   * @param {*} operator arithmetic operator to be used (+ or -)\r\n   * @param {String} subFaction the subFaction\r\n   * @returns flag: does the selection conform to the rules?\r\n   */\r\n  const alterList = (operator, subFaction) => {\r\n    const occurences = selectedUnits.filter( u =>  u.name === selectedUnit.name);\r\n    const maxOccurences = subFactionAllowance[subFaction].occurences;\r\n    const minPoints = subFactionAllowance[subFaction].min;\r\n    const maxPoints = subFactionAllowance[subFaction].max;\r\n    const total = subFactionAllowance[subFaction].total;\r\n\r\n    if (operator === operators.ADD) {\r\n      return (\r\n        occurences > maxOccurences ||\r\n        armyPointsTotal * minPoints < total + selectedUnit.points ||\r\n        armyPointsTotal * maxPoints > total + selectedUnit.points\r\n      );\r\n    } else if (operator === operators.SUBTRACT) {\r\n      return (\r\n        armyPointsTotal * minPoints < total - selectedUnit.points ||\r\n        armyPointsTotal * maxPoints > total - selectedUnit.points\r\n      );\r\n    }\r\n  };\r\n\r\n\r\n  return [];\r\n};\r\n",["131","132"],"C:\\Users\\User\\demonworld_ui\\src\\constants\\operators.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\ListGenerator\\subList.js",["133"],"// React\r\nimport React, { Fragment, useEffect, useState } from \"react\";\r\n// Material UI\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { IconButton, Typography } from \"@material-ui/core\";\r\n// icons\r\nimport RemoveCircleOutlineIcon from \"@material-ui/icons/RemoveCircleOutline\";\r\n\r\n// import ClearIcon from \"@material-ui/icons/Clear\";\r\n// components and functions\r\nimport { alliesMapping } from \"../gameLogic/allies\";\r\nimport GearButtonList from \"./gearButtons\";\r\n\r\nconst useStyles = makeStyles({\r\n  gearListHeader: {\r\n    testAlign: \"right\",\r\n    color: \"red\",\r\n  },\r\n  deleteBttn: {\r\n    padding: \"0\",\r\n    marginRight: \"2em\",\r\n  },\r\n  decrption: {\r\n    fontFamily: \"Beryliumbold\",\r\n    marginRight: \"3em\",\r\n  },\r\n});\r\n\r\nconst SubList = (props) => {\r\n  // TODO:\r\n  // 5. This must contain the styling for the sublist: header with subFaction name , subFaction Point Total underline\r\n  // 8. Gear: gear allocated to a unit must be its OWN list and therefore its own module (no, really...)\r\n  // 9. their must be SEVERAL buttons next to each entry:\r\n  /**\r\n   *  - remove unit from list\r\n   *  - add gear\r\n   *  - remove all gear\r\n   *  - IF you feelm like it, do this insteas: individual buttons for item categories: weapon, shield+armor, potions, magic trinkets\r\n   *  -  that means: array or object\r\n   *\r\n   */\r\n\r\n  // eslint-disable-next-line no-unused-vars\r\n  const classes = useStyles();\r\n\r\n  const [itemButtonsVisibility, setItemButtonsVisibility] = useState({});\r\n  const [subFactionTotal, setSubFactionTotal] = useState(0);\r\n\r\n  /**\r\n   * useEffect updates the itemButtonsVisibility object everytime a new unit is added to the ArmyList.\r\n   * The object is needed to have a unique key for every button row.\r\n   */\r\n  useEffect(() => {\r\n    let temp = {};\r\n    let unitName;\r\n    // eslint-disable-next-line\r\n    props.subFactionUnits.map((u) => {\r\n      unitName = u.unitName + u.uniqueID;\r\n      temp = { ...temp, [unitName]: false };\r\n    });\r\n    setItemButtonsVisibility(temp);\r\n  }, [props.subFactionUnits]);\r\n\r\n  /**\r\n   * useffEct calculates the total for the sub faction.\r\n   */\r\n  useEffect(() => {\r\n    let temp = 0;\r\n    if (props.subFactionUnits) {\r\n      props.subFactionUnits.forEach((u) => (temp += u.points));\r\n    }\r\n    setSubFactionTotal(temp);\r\n  }, [props.subFactionUnits]);\r\n\r\n  const removeUnit = (identifier) => {\r\n    props.removeUnit(identifier);\r\n  };\r\n\r\n  /**\r\n   * Abstraction / decoupling function that calls the use state setter to toggle\r\n   * the item buttons when an entry is clicked.\r\n   * @param {string} identifier\r\n   */\r\n  const toggleGearBttns = (identifier) => {\r\n    setItemButtonsVisibility({\r\n      ...itemButtonsVisibility,\r\n      [identifier]: !itemButtonsVisibility[identifier],\r\n    });\r\n  };\r\n\r\n  /**\r\n   * The component creates the list for a single sub faction.\r\n   * An entry contains:\r\n   *  - the unit name\r\n   *  -  points\r\n   *  - button row to select different kinds of items\r\n   *  - a button to delete the entire entry.\r\n   * The buttons only appear when the user hovers the mouse over the entry.\r\n   */\r\n  return (\r\n    <Fragment>\r\n      <List>\r\n        {props.subFactionUnits.map((u) => {\r\n          const identifier = u.unitName + u.uniqueID;\r\n\r\n          return (\r\n            <ListItem key={identifier}>\r\n              <IconButton\r\n                onClick={() => {\r\n                  removeUnit(identifier);\r\n                }}\r\n                className={classes.deleteBttn}\r\n              >\r\n                <RemoveCircleOutlineIcon />\r\n              </IconButton>\r\n              <Typography\r\n                className={classes.decrption}\r\n                onClick={() => {\r\n                  toggleGearBttns(identifier);\r\n                }}\r\n              >\r\n                {u.unitName} - {u.points}\r\n              </Typography>\r\n              {itemButtonsVisibility[identifier] ? <GearButtonList unit={u} /> : null}\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </List>\r\n      <Typography>Gesamt: {subFactionTotal} </Typography>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SubList;\r\n","C:\\Users\\User\\demonworld_ui\\src\\components\\ListGenerator\\gearButtons.js",[],"C:\\Users\\User\\demonworld_ui\\src\\constants\\numericConstants.js",[],["134","135"],"C:\\Users\\User\\demonworld_ui\\src\\theme.js",[],"C:\\Users\\User\\demonworld_ui\\src\\components\\landingPage\\landingPage.js",["136"],"// React\r\nimport React from \"react\";\r\n// Material UI\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  placeholder: {\r\n    color: \"black\",\r\n    fontSize: \"20 em\",\r\n  },\r\n});\r\n\r\nconst LandingPage = (props) => {\r\n  const classes = useStyles();\r\n\r\n  return <p className=\"classes.placeholder\">PLACEHOLDER!</p>;\r\n};\r\n\r\nexport default LandingPage;\r\n",{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":4,"column":17,"nodeType":"143","messageId":"144","endLine":4,"endColumn":26},{"ruleId":"141","severity":1,"message":"145","line":40,"column":16,"nodeType":"143","messageId":"144","endLine":40,"endColumn":23},{"ruleId":"137","replacedBy":"146"},{"ruleId":"139","replacedBy":"147"},{"ruleId":"141","severity":1,"message":"148","line":63,"column":9,"nodeType":"143","messageId":"144","endLine":63,"endColumn":16},{"ruleId":"141","severity":1,"message":"149","line":1,"column":8,"nodeType":"143","messageId":"144","endLine":1,"endColumn":13},{"ruleId":"141","severity":1,"message":"150","line":11,"column":7,"nodeType":"143","messageId":"144","endLine":11,"endColumn":18},{"ruleId":"141","severity":1,"message":"151","line":18,"column":8,"nodeType":"143","messageId":"144","endLine":18,"endColumn":16},{"ruleId":"141","severity":1,"message":"152","line":18,"column":18,"nodeType":"143","messageId":"144","endLine":18,"endColumn":29},{"ruleId":"137","replacedBy":"153"},{"ruleId":"139","replacedBy":"154"},{"ruleId":"141","severity":1,"message":"155","line":13,"column":10,"nodeType":"143","messageId":"144","endLine":13,"endColumn":23},{"ruleId":"137","replacedBy":"156"},{"ruleId":"139","replacedBy":"157"},{"ruleId":"141","severity":1,"message":"158","line":14,"column":9,"nodeType":"143","messageId":"144","endLine":14,"endColumn":16},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setFlag' is assigned a value but never used.",["159"],["160"],"'maximum' is assigned a value but never used.","'React' is defined but never used.","'GoblinRules' is assigned a value but never used.","'specials' is assigned a value but never used.","'setSpecials' is assigned a value but never used.",["159"],["160"],"'alliesMapping' is defined but never used.",["159"],["160"],"'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]